alpha2 <- (a2 + n.sum) / 2
beta_sum <- 0
for (i in 1:J) {
sch <- y[[i]]
beta_sum <- beta_sum + sum((sch - theta.curr[i])^2)
}
beta2 <- (b2 + beta_sum) / 2
cat(alpha2, beta2)
sigmasq.curr <- rinvgamma(1, shape = alpha2, rate = beta2)
sigmasq[i] <- sigmasq.curr
}
set.seed(0183939)
mu0 <- 7
sigma0sq <- 5
a1 <- 10
b1 <- 20
a2 <- 15
b2 <- 30
J <- 8
size <- 1e4
# vector of numbers representing number of samples in each dataset
n <- sapply(y, length)
n.sum <- sum(n)
# vector of numbers representing mean of samples in each dataset
y.bar <- sapply(y, mean)
# Storage for samples
theta <- matrix(0, nrow = size, ncol = 8)
mu <- numeric(size)
tausq <- numeric(size)
sigmasq <- numeric(size)
# Initial samples / "Current" values
theta.curr <- numeric(8)
mu.curr <- rnorm(1, mean = mu0, sd = sqrt(sigma0sq))
tausq.curr <- rinvgamma(1, shape = a1/2, rate = b1/2)
sigmasq.curr <- rinvgamma(1, shape = a2/2, rate = b2/2)
##### Gibbs Sampling
for (i in 1:size) {
### Sample Thetas
# n.mean is a vector of 8 means for the 8 thetas to be drawn
n.mean <- (n*tausq.curr*y.bar + sigmasq.curr*mu.curr) / (n*tausq.curr + sigmasq.curr)
# n.var is a vector of 8 vars for the 8 thetas to be drawn
n.var <- (tausq.curr * sigmasq.curr) / (sigmasq.curr + n*tausq.curr)
theta.curr <- rnorm(8, mean = n.mean, sd = sqrt(n.var))
theta[i,] <- theta.curr
### Sample Mus
# n.mean is a scalar mean for the mu to be drawn
n.mean2 <- (mu0 * tausq.curr + sigma0sq * sum(theta.curr)) / (tausq.curr + sigma0sq * J)
# n.mean is a scalar var for the mu to be drawn
n.var2 <- (sqrt(sigma0sq) * tausq.curr) / (tausq.curr + sigmasq.curr * J)
mu.curr <- rnorm(1, mean = n.mean2, sd = sqrt(n.var2))
mu[i] <- mu.curr
### Sample Taus
alpha <- (a1 + J)/2
beta <- (b1 + sum((theta.curr - mu.curr)^2)) / 2
tausq.curr <- rinvgamma(1, shape = alpha, rate = beta)
tausq[i] <- tausq.curr
### Sample Sigma Squares
alpha2 <- (a2 + n.sum) / 2
beta_sum <- 0
for (i in 1:J) {
sch <- y[[i]]
beta_sum <- beta_sum + sum((sch - theta.curr[i])^2)
}
beta2 <- (b2 + beta_sum) / 2
cat(alpha2, beta2, "\n")
sigmasq.curr <- rinvgamma(1, shape = alpha2, rate = beta2)
sigmasq[i] <- sigmasq.curr
}
rinvgamma(1, 97.5, 1327.157)
set.seed(0183939)
mu0 <- 7
sigma0sq <- 5
a1 <- 10
b1 <- 20
a2 <- 15
b2 <- 30
J <- 8
size <- 1e4
# vector of numbers representing number of samples in each dataset
n <- sapply(y, length)
n.sum <- sum(n)
# vector of numbers representing mean of samples in each dataset
y.bar <- sapply(y, mean)
# Storage for samples
theta <- matrix(0, nrow = size, ncol = 8)
mu <- numeric(size)
tausq <- numeric(size)
sigmasq <- numeric(size)
# Initial samples / "Current" values
theta.curr <- numeric(8)
mu.curr <- rnorm(1, mean = mu0, sd = sqrt(sigma0sq))
tausq.curr <- rinvgamma(1, shape = a1/2, rate = b1/2)
sigmasq.curr <- rinvgamma(1, shape = a2/2, rate = b2/2)
##### Gibbs Sampling
for (i in 1:size) {
### Sample Thetas
# n.mean is a vector of 8 means for the 8 thetas to be drawn
n.mean <- (n*tausq.curr*y.bar + sigmasq.curr*mu.curr) / (n*tausq.curr + sigmasq.curr)
# n.var is a vector of 8 vars for the 8 thetas to be drawn
n.var <- (tausq.curr * sigmasq.curr) / (sigmasq.curr + n*tausq.curr)
theta.curr <- rnorm(8, mean = n.mean, sd = sqrt(n.var))
theta[i,] <- theta.curr
### Sample Mus
# n.mean is a scalar mean for the mu to be drawn
n.mean2 <- (mu0 * tausq.curr + sigma0sq * sum(theta.curr)) / (tausq.curr + sigma0sq * J)
# n.mean is a scalar var for the mu to be drawn
n.var2 <- (sqrt(sigma0sq) * tausq.curr) / (tausq.curr + sigmasq.curr * J)
mu.curr <- rnorm(1, mean = n.mean2, sd = sqrt(n.var2))
mu[i] <- mu.curr
### Sample Taus
alpha <- (a1 + J)/2
beta <- (b1 + sum((theta.curr - mu.curr)^2)) / 2
tausq.curr <- rinvgamma(1, shape = alpha, rate = beta)
tausq[i] <- tausq.curr
### Sample Sigma Squares
alpha2 <- (a2 + n.sum) / 2
beta_sum <- 0
for (i in 1:J) {
sch <- y[[i]]
beta_sum <- beta_sum + sum((sch - theta.curr[i])^2)
}
beta2 <- (b2 + beta_sum) / 2
sigmasq.curr <- rinvgamma(1, shape = alpha2, rate = beta2)
cat(sigmasq.curr, "\n")
sigmasq[i] <- sigmasq.curr
}
sigmasq
sigmasq[5001:5002]
sigmasq[5001:50010]
sigmasq[9980:1e4]
set.seed(0183939)
mu0 <- 7
sigma0sq <- 5
a1 <- 10
b1 <- 20
a2 <- 15
b2 <- 30
J <- 8
size <- 1e4
# vector of numbers representing number of samples in each dataset
n <- sapply(y, length)
n.sum <- sum(n)
# vector of numbers representing mean of samples in each dataset
y.bar <- sapply(y, mean)
# Storage for samples
theta <- matrix(0, nrow = size, ncol = 8)
mu <- numeric(size)
tausq <- numeric(size)
sigmasq <- numeric(size)
# Initial samples / "Current" values
theta.curr <- numeric(8)
mu.curr <- rnorm(1, mean = mu0, sd = sqrt(sigma0sq))
tausq.curr <- rinvgamma(1, shape = a1/2, rate = b1/2)
sigmasq.curr <- rinvgamma(1, shape = a2/2, rate = b2/2)
##### Gibbs Sampling
for (i in 1:size) {
### Sample Thetas
# n.mean is a vector of 8 means for the 8 thetas to be drawn
n.mean <- (n*tausq.curr*y.bar + sigmasq.curr*mu.curr) / (n*tausq.curr + sigmasq.curr)
# n.var is a vector of 8 vars for the 8 thetas to be drawn
n.var <- (tausq.curr * sigmasq.curr) / (sigmasq.curr + n*tausq.curr)
theta.curr <- rnorm(8, mean = n.mean, sd = sqrt(n.var))
theta[i,] <- theta.curr
### Sample Mus
# n.mean is a scalar mean for the mu to be drawn
n.mean2 <- (mu0 * tausq.curr + sigma0sq * sum(theta.curr)) / (tausq.curr + sigma0sq * J)
# n.mean is a scalar var for the mu to be drawn
n.var2 <- (sqrt(sigma0sq) * tausq.curr) / (tausq.curr + sigmasq.curr * J)
mu.curr <- rnorm(1, mean = n.mean2, sd = sqrt(n.var2))
mu[i] <- mu.curr
### Sample Taus
alpha <- (a1 + J)/2
beta <- (b1 + sum((theta.curr - mu.curr)^2)) / 2
tausq.curr <- rinvgamma(1, shape = alpha, rate = beta)
tausq[i] <- tausq.curr
### Sample Sigma Squares
alpha2 <- (a2 + n.sum) / 2
beta_sum <- 0
for (j in 1:J) {
sch <- y[[j]]
beta_sum <- beta_sum + sum((sch - theta.curr[j])^2)
}
beta2 <- (b2 + beta_sum) / 2
sigmasq.curr <- rinvgamma(1, shape = alpha2, rate = beta2)
sigmasq[i] <- sigmasq.curr
}
# Assess Gibbs samples
theta.mc <- mcmc(theta[5001:size,])
mu.mc <- mcmc(mu[5001:size])
tausq.mc <- mcmc(tausq[5001:size])
sigmasq.mc <- mcmc(sigmasq[5001:size])
for (i in 1:J) {
traceplot(mcmc(theta[5001:size,i]))
title(paste("Traceplot of theta ", i))
}
for (i in 1:J) {
autocorr.plot(mcmc(theta[5001:size,i]))
title(paste("Autocorrplot of theta ", i))
}
traceplot(mu.mc)
title("Traceplot of Mu")
autocorr.plot((mu.mc))
title("Autocorr of Mu")
traceplot(tausq.mc)
title("Traceplot of TauSquare")
autocorr.plot(tausq.mc)
title("Autocorr of TauSquare")
traceplot(sigmasq.mc)
title("Traceplot of SigmaSquare")
autocorr.plot(sigmasq.mc)
title("Autocorr of SigmaSquare")
HPDinterval()
HPDinterval
mean(mu.mc)
HPDinterval(mu.mc)
h <- HPDinterval(mu.mc)
str(h)
h$lower
class(h)
h["lower"]
h
h["var1", "lower"]
# Poster mean for mu
cat("The posterior mean of mu is: ", mean(mu.mc), "\n")
hpd.mu <- HPDinterval(mu.mc)
cat("The 95% HPD interval for mu is: (",
hpd.mu["var1", "lower"], ", ",
hpd.mu["var1", "upper"], "\n", sep="")
# Poster mean for mu
cat("The posterior mean of mu is: ", mean(mu.mc), "\n")
hpd.mu <- HPDinterval(mu.mc)
cat("The 95% HPD interval for mu is: (",
hpd.mu["var1", "lower"], ", ",
hpd.mu["var1", "upper"], ")\n", sep="")
hpd.mu
# Poster mean for TauSquare
cat("The posterior mean of TauSquare is: ", mean(tausq.mc), "\n")
hpd.mu <- HPDinterval(tausq.mc, prob = 0.95)
cat("The 95% HPD interval for TauSquare is: (",
hpd.mu["var1", "lower"], ", ",
hpd.mu["var1", "upper"], ")\n", sep="")
# Poster mean for mu
cat("The posterior mean of mu is: ", mean(mu.mc), "\n")
hpd.mu <- HPDinterval(mu.mc, prob = 0.95)
cat("The 95% HPD interval for mu is: (",
hpd.mu["var1", "lower"], ", ",
hpd.mu["var1", "upper"], ")\n", sep="")
# Poster mean for TauSquare
cat("The posterior mean of TauSquare is: ", mean(tausq.mc), "\n")
hpd.tausq <- HPDinterval(tausq.mc, prob = 0.95)
cat("The 95% HPD interval for TauSquare is: (",
hpd.mu["var1", "lower"], ", ",
hpd.mu["var1", "upper"], ")\n", sep="")
# Poster mean for mu
cat("The posterior mean of mu is: ", mean(mu.mc), "\n")
hpd.mu <- HPDinterval(mu.mc, prob = 0.95)
cat("The 95% HPD interval for mu is: (",
hpd.mu["var1", "lower"], ", ",
hpd.mu["var1", "upper"], ")\n", sep="")
# Poster mean for mu
cat("The posterior mean of mu is: ", mean(mu.mc), "\n")
hpd.mu <- HPDinterval(mu.mc, prob = 0.95)
cat("The 95% HPD interval for mu is: (",
hpd.mu["var1", "lower"], ", ",
hpd.mu["var1", "upper"], ")\n", sep="")
# Poster mean for mu
cat("The posterior mean of mu is: ", mean(mu.mc), "\n")
hpd.mu <- HPDinterval(mu.mc, prob = 0.95)
cat("The 95% HPD interval for mu is: (",
hpd.mu["var1", "lower"], ", ",
hpd.mu["var1", "upper"], ")\n", sep="")
# Poster mean for TauSquare
cat("The posterior mean of TauSquare is: ", mean(tausq.mc), "\n")
hpd.tausq <- HPDinterval(tausq.mc, prob = 0.95)
cat("The 95% HPD interval for TauSquare is: (",
hpd.tausq["var1", "lower"], ", ",
hpd.tausq["var1", "upper"], ")\n", sep="")
# Poster mean for SigmaSquare
cat("The posterior mean of SigmaSquare is: ", mean(sigmasq.mc), "\n")
hpd.sigmasq <- HPDinterval(sigmasq.mc, prob = 0.95)
cat("The 95% HPD interval for SigmaSquare is: (",
hpd.sigmasq["var1", "lower"], ", ",
hpd.sigmasq["var1", "upper"], ")\n", sep="")
# Plot Prior Density
x <- seq(0, 100, by = 0.1)
plot(x, dnorm(x, mean = mu0, sd = sqrt(sigma0sq)))
plot(x, dnorm(x, mean = mu0, sd = sqrt(sigma0sq)), type = "l")
plot(x, dnorm(x, mean = mu0, sd = sqrt(sigma0sq)), type = "l", ylab = "Prior PDF of Mu")
plot(x, dnorm(x, mean = mu0, sd = sqrt(sigma0sq)), type = "l", ylab = "PDF of Mu", colour = "r")
plot(x, dnorm(x, mean = mu0, sd = sqrt(sigma0sq)), type = "l", ylab = "PDF of Mu", color = "r")
plot(x, dnorm(x, mean = mu0, sd = sqrt(sigma0sq)), type = "l", ylab = "PDF of Mu", col = "r")
plot(x, dnorm(x, mean = mu0, sd = sqrt(sigma0sq)), type = "l", ylab = "PDF of Mu")
lines(density(mu.mc))
plot(x, dnorm(x, mean = mu0, sd = sqrt(sigma0sq)), type = "l",
ylab = "PDF of Mu", ylim = c(0, 1))
plot(x, dnorm(x, mean = mu0, sd = sqrt(sigma0sq)), type = "l",
ylab = "PDF of Mu", ylim = c(0, 0.2))
lines(density(mu.mc))
plot(x, dnorm(x, mean = mu0, sd = sqrt(sigma0sq)), type = "l",
ylab = "PDF of Mu", ylim = c(0, 1))
lines(density(mu.mc))
plot(x, dnorm(x, mean = mu0, sd = sqrt(sigma0sq)), type = "l",
ylab = "PDF of Mu", ylim = c(0, 4))
lines(density(mu.mc))
plot(x, dnorm(x, mean = mu0, sd = sqrt(sigma0sq)), type = "l",
ylab = "PDF of Mu", ylim = c(0, 1.5))
lines(density(mu.mc))
lines(density(mu.mc), col = "b")
lines(density(mu.mc), col = "blue")
# Plot Prior Density
x <- seq(0, 30, by = 0.1)
plot(x, dnorm(x, mean = mu0, sd = sqrt(sigma0sq)), type = "l",
ylab = "PDF of Mu", ylim = c(0, 1.5))
lines(density(mu.mc), col = "blue")
# Plot Prior Density
x <- seq(0, 25, by = 0.1)
plot(x, dnorm(x, mean = mu0, sd = sqrt(sigma0sq)), type = "l",
ylab = "PDF of Mu", ylim = c(0, 1.5))
lines(density(mu.mc), col = "blue")
# Poster mean for mu
cat("The posterior mean of mu is: ", mean(mu.mc), "\n")
hpd.mu <- HPDinterval(mu.mc, prob = 0.95)
cat("The 95% HPD interval for mu is: (",
hpd.mu["var1", "lower"], ", ",
hpd.mu["var1", "upper"], ")\n", sep="")
# Plot Prior Density
x <- seq(0, 25, by = 0.1)
plot(x, dnorm(x, mean = mu0, sd = sqrt(sigma0sq)), type = "l",
ylab = "PDF of Mu", ylim = c(0, 1.4))
lines(density(mu.mc), col = "blue")
plot(x, dnorm(x, mean = mu0, sd = sqrt(sigma0sq)), type = "l",
ylab = "PDF of Mu", xlab = expression(mu), ylim = c(0, 1.4))
lines(density(mu.mc), col = "blue")
?dinvgamma
# Poster mean for TauSquare
cat("The posterior mean of TauSquare is: ", mean(tausq.mc), "\n")
hpd.tausq <- HPDinterval(tausq.mc, prob = 0.95)
cat("The 95% HPD interval for TauSquare is: (",
hpd.tausq["var1", "lower"], ", ",
hpd.tausq["var1", "upper"], ")\n", sep="")
# Plot Densities
x <- seq(0, 25, by = 0.1)
plot(x, dinvgamma(x, a1/2, b1/2, type = "l",
ylab = "PDF of Tau", xlab = expression(tau), ylim = c(0, 1.4))
lines(density(tau.mc), col = "blue")
# Poster mean for TauSquare
cat("The posterior mean of TauSquare is: ", mean(tausq.mc), "\n")
hpd.tausq <- HPDinterval(tausq.mc, prob = 0.95)
cat("The 95% HPD interval for TauSquare is: (",
hpd.tausq["var1", "lower"], ", ",
hpd.tausq["var1", "upper"], ")\n", sep="")
# Plot Densities
x <- seq(0, 25, by = 0.1)
plot(x, dinvgamma(x, a1/2, b1/2), type = "l",
ylab = "PDF of Tau", xlab = expression(tau), ylim = c(0, 1.4))
lines(density(tau.mc), col = "blue")
# Poster mean for TauSquare
cat("The posterior mean of TauSquare is: ", mean(tausq.mc), "\n")
hpd.tausq <- HPDinterval(tausq.mc, prob = 0.95)
cat("The 95% HPD interval for TauSquare is: (",
hpd.tausq["var1", "lower"], ", ",
hpd.tausq["var1", "upper"], ")\n", sep="")
# Plot Densities
x <- seq(0, 25, by = 0.1)
plot(x, dinvgamma(x, a1/2, b1/2), type = "l",
ylab = "PDF of Tau", xlab = expression(tau), ylim = c(0, 1.4))
lines(density(tausq.mc), col = "blue")
# Poster mean for TauSquare
cat("The posterior mean of TauSquare is: ", mean(tausq.mc), "\n")
hpd.tausq <- HPDinterval(tausq.mc, prob = 0.95)
cat("The 95% HPD interval for TauSquare is: (",
hpd.tausq["var1", "lower"], ", ",
hpd.tausq["var1", "upper"], ")\n", sep="")
# Plot Densities
x <- seq(0, 10, by = 0.1)
plot(x, dinvgamma(x, a1/2, b1/2), type = "l",
ylab = "PDF of Tau", xlab = expression(tau), ylim = c(0, 0.8))
lines(density(tausq.mc), col = "blue")
# Poster mean for SigmaSquare
cat("The posterior mean of SigmaSquare is: ", mean(sigmasq.mc), "\n")
hpd.sigmasq <- HPDinterval(sigmasq.mc, prob = 0.95)
cat("The 95% HPD interval for SigmaSquare is: (",
hpd.sigmasq["var1", "lower"], ", ",
hpd.sigmasq["var1", "upper"], ")\n", sep="")
# Plot Densities
x <- seq(0, 50, by = 0.1)
plot(x, dinvgamma(x, a2/2, b2/2), type = "l",
ylab = "PDF of SigmaSquare", xlab = expression(sigma[2]), ylim = c(0, 0.8))
lines(density(tausq.mc), col = "blue")
# Poster mean for SigmaSquare
cat("The posterior mean of SigmaSquare is: ", mean(sigmasq.mc), "\n")
hpd.sigmasq <- HPDinterval(sigmasq.mc, prob = 0.95)
cat("The 95% HPD interval for SigmaSquare is: (",
hpd.sigmasq["var1", "lower"], ", ",
hpd.sigmasq["var1", "upper"], ")\n", sep="")
# Plot Densities
x <- seq(0, 50, by = 0.1)
plot(x, dinvgamma(x, a2/2, b2/2), type = "l",
ylab = "PDF of SigmaSquare", xlab = expression(sigma[2]), ylim = c(0, 0.8))
lines(density(sigmasq.mc), col = "blue")
# Poster mean for SigmaSquare
hpd.sigmasq <- HPDinterval(sigmasq.mc, prob = 0.95)
cat("The posterior mean of SigmaSquare is: ", mean(sigmasq.mc), "\n")
cat("The 95% HPD interval for SigmaSquare is: (",
hpd.sigmasq["var1", "lower"], ", ",
hpd.sigmasq["var1", "upper"], ")\n", sep="")
# Plot Densities
x <- seq(0, 25, by = 0.1)
plot(x, dinvgamma(x, a2/2, b2/2), type = "l",
ylab = "PDF of SigmaSquare", xlab = expression(sigma[2]), ylim = c(0, 0.7))
lines(density(sigmasq.mc), col = "blue")
tausq
tausq.mc
R.samples <- tausq.mc / (tausq.mc + sigmasq.mc)
lines(density(R.samples))
plot(density(R.prior))
ma(5000, shape = a1/2, rate = b1/2)
sigmasq.prior <- rinvgamma(5000, shape = a2/2, rate = b2/2)
R.prior <- tausq.prior / (tausq.prior + sigmasq.prior)
# Prior samples
tausq.prior <- rinvgamma(5000, shape = a1/2, rate = b1/2)
sigmasq.prior <- rinvgamma(5000, shape = a2/2, rate = b2/2)
R.prior <- tausq.prior / (tausq.prior + sigmasq.prior)
# Posterior samples
R.post <- tausq.mc / (tausq.mc + sigmasq.mc)
# Plot prior and posteriors
x <- seq(0, 25, by = 0.1)
plot(density(R.prior))
lines(density(R.samples))
# Plot prior and posteriors
plot(density(R.prior), ylim = c(0, 5))
lines(density(R.samples))
# Plot prior and posteriors
plot(density(R.prior), ylim = c(0, 20))
lines(density(R.samples))
# Plot prior and posteriors
plot(density(R.prior), ylim = c(0, 10))
lines(density(R.samples))
lines(density(R.samples), col = "blue")
str(theta.mc)
theta.means <- apply(theta.mc, 2, mean)
theta.means
y.bar
theta.means <- apply(theta.mc, 2, mean)
plot(1:8, theta.means)
points(1:8, y.bar)
plot(1:8, theta.means, col="blue")
plot(1:8, theta.means, col="blue", pty = ".")
points(1:8, y.bar)
?plot
plot(1:8, theta.means, col="blue", pch = ".")
points(1:8, y.bar)
plot(1:8, theta.means, col="blue", pch = "*")
points(1:8, y.bar)
plot(1:8, theta.means, col="blue", pch = "o")
points(1:8, y.bar)
plot(1:8, theta.means, col="blue", pch = "1")
points(1:8, y.bar)
?points
theta.means <- apply(theta.mc, 2, mean)
plot(1:8, theta.means, col="blue", pch = 16)
points(1:8, y.bar, pch = 17)
plot(1:8, theta.means, col="blue", pch = 16, alpha = 0.5)
points(1:8, y.bar, pch = 17)
theta.means <- apply(theta.mc, 2, mean)
plot(1:8, theta.means, col="blue", pch = 16)
points(1:8, y.bar, pch = 17)
warnings()
theta.means <- apply(theta.mc, 2, mean)
plot(1:8, theta.means, col="blue", pch = 16)
points(1:8, y.bar, pch = 17)
theta.means
y.bar
plot(1:8, theta.means, col="blue", pch = 16, size = 2)
?points
plot(1:8, theta.means, col="blue", pch = 16, cex = 2)
points(1:8, y.bar, pch = 17, cex = 2)
plot(1:8, theta.means, col="blue", pch = 16, cex = 1)
points(1:8, y.bar, pch = 17, cex = 2)
plot(1:8, theta.means, col="blue", pch = 16, cex = 1, ylim = c(6, 11))
points(1:8, y.bar, pch = 17, cex = 2)
theta.means <- apply(theta.mc, 2, mean)
plot(1:8, theta.means, col="blue", pch = 16, cex = 1, ylim = c(6, 11))
points(1:8, y.bar, pch = 17, cex = 1)
plot(1:8, theta.means, col="blue", pch = 16, cex = 1, ylim = c(6, 11)
xlab = expression(theta))
points(1:8, y.bar, pch = 17, cex = 1)
plot(1:8, theta.means, col="blue", pch = 16, cex = 1, ylim = c(6, 11), xlab =) expression(theta))
plot(1:8, theta.means, col="blue", pch = 16, cex = 1, ylim = c(6, 11),
xlab = expression(theta))
points(1:8, y.bar, pch = 17, cex = 1)
plot(1:8, theta.means, col="blue", pch = 16, cex = 1, ylim = c(6, 11),
xlab = expression(theta[j]))
points(1:8, y.bar, pch = 17, cex = 1)
plot(1:8, theta.means, col="blue", pch = 16, cex = 1, ylim = c(6, 11),
xlab = expression(theta[j]), ylab = "Mean value")
points(1:8, y.bar, pch = 17, cex = 1)
legend()
legend(legend = c("hi", "be"))
theta.means <- apply(theta.mc, 2, mean)
plot(1:8, theta.means, col="blue", pch = 16, cex = 1, ylim = c(6, 11),
xlab = expression(theta[j]), ylab = "Mean value")
points(1:8, y.bar, pch = 17, cex = 1)
legend(legend = c("hi", "be"))
mean(y.bar)
theta.means <- apply(theta.mc, 2, mean)
plot(1:8, theta.means, col="blue", pch = 16, cex = 1, ylim = c(6, 11),
xlab = expression(theta[j]), ylab = "Mean value")
points(1:8, y.bar, pch = 17, cex = 1)
abline(h = mean(y.bar))
# Note that the overall mean is 7.64589
mean(y.bar)
